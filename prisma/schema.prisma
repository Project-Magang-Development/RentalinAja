// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Merchant {
  merchant_id        Int                @id @default(autoincrement())
  merchant_name      String
  merchant_company   String
  domain             String
  status_subscriber  String             @default("Aktif")
  start_date         DateTime?  
  end_date           DateTime?
  email              String             @unique
  password           String
  vehicles           Vehicle[]
  schedules          Schedule[]
  orders             Order[]
  merchantPayments   MerchantPayment[]
  payment            Payment[]
  booking            Booking[]
}

model MerchantPayment {
  id              Int      @id @default(autoincrement())
  merchant_id     Int
  amount          Int
  payment_method  String
  status          String   @default("Pending")
  payment_date    DateTime? 
  description     String?  

  Merchant        Merchant @relation(fields: [merchant_id], references: [merchant_id])
}

model Vehicle {
  vehicles_id      Int         @id @default(autoincrement())
  merchant_id      Int
  name             String
  model            String
  year             Int
  no_plat          String      @unique
  imageUrl         String      @db.Text
  capacity         Int
  Merchant         Merchant    @relation(fields: [merchant_id], references: [merchant_id])
  Schedules        Schedule[] 
}

model Schedule {
  schedules_id     Int         @id @default(autoincrement())
  merchant_id      Int
  vehicles_id      Int         
  start_date       DateTime
  end_date         DateTime
  price            Int
  Merchant         Merchant    @relation(fields: [merchant_id], references: [merchant_id])
  Vehicle          Vehicle     @relation(fields: [vehicles_id], references: [vehicles_id])
  orders           Order[]
}



model Payment {
  payment_id     Int      @id @default(autoincrement())
  order_id       Int
  merchant_id    Int      // Menambahkan merchant_id
  amount         Int
  payment_method String
  status         String   @default("Pending")
  payment_date   DateTime?

  Order          Order    @relation(fields: [order_id], references: [order_id])
  Merchant       Merchant @relation(fields: [merchant_id], references: [merchant_id]) // Menambahkan relasi ke Merchant
}

model Order {
  order_id       Int       @id @default(autoincrement())
  schedules_id   Int
  merchant_id    Int      // Sudah ada
  start_date     DateTime
  end_date       DateTime
  customer_name  String
  total_amount   Int
  status         String   @default("Pending")
  
  Merchant       Merchant    @relation(fields: [merchant_id], references: [merchant_id]) // Sudah ada
  Schedule       Schedule    @relation(fields: [schedules_id], references: [schedules_id])
  payments       Payment[]
  booking        Booking?    
}

model Booking {
  booking_id     Int      @id @default(autoincrement())
  order_id       Int       @unique
  merchant_id    Int       // Menambahkan merchant_id

  Order          Order    @relation(fields: [order_id], references: [order_id])
  Merchant       Merchant @relation(fields: [merchant_id], references: [merchant_id]) // Menambahkan relasi ke Merchant
}






















