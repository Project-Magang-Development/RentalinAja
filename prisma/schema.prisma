// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  admin_id String @id @default(uuid())
  email    String @unique
  password String
}

model Merchant {
  merchant_id            String                 @id @default(uuid())
  status_subscriber      String                 @default("Aktif")
  start_date             DateTime?
  end_date               DateTime?
  merchant_email         String                 @unique
  password               String
  api_key                String                 @unique
  used_storage_vehicle   Int                    @default(0)
  used_storage_order     Int                    @default(0)
  vehicles               Vehicle[]
  schedules              Schedule[]
  orders                 Order[]
  booking                Booking[]
  package_id             String
  package                Package                @relation(fields: [package_id], references: [package_id])
  Payment                Payment[]
  merchant_payment_id    String                 @unique
  MerchantPayment        MerchantPayment        @relation(fields: [merchant_payment_id], references: [merchant_payment_id])
  pending_id             String                 @unique
  MerchantPendingPayment MerchantPendingPayment @relation(fields: [pending_id], references: [pending_id])
  available_balance      Int                    @default(0)
  Income                 Income[]
  Expense                Expense[]
}



model MerchantPendingPayment {
  pending_id        String            @id @default(uuid())
  invoice_id        String            @unique
  package_name      String
  package_id        String
  amount            Int
  merchant_name     String
  password          String
  merchant_email    String
  merchant_whatsapp String
  rental_name       String
  rental_type       String
  merchant_city     String
  merchant_address  String
  status            String            @default("Pending")
  payment_date      DateTime?
  package           Package           @relation(fields: [package_id], references: [package_id])
  MerchantPayment   MerchantPayment[]
  Merchant          Merchant?
}

model Income {
  id          String   @id @default(uuid())
  merchant_id String
  amount      Int
  created_at  DateTime @default(now())
  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])
}

model Expense {
  id          String   @id @default(uuid())
  merchant_id String
  amount      Int
  created_at  DateTime @default(now())
  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])
}

model MerchantPayment {
  merchant_payment_id String @id @default(uuid())
  pending_id          String @unique
  invoice_id          String @unique
  status              String

  MerchantPendingPayment MerchantPendingPayment @relation(fields: [pending_id], references: [pending_id])
  Merchant               Merchant?
}

model Package {
  package_id             String                   @id @default(uuid())
  package_name           String
  package_description    String
  package_price          Int
  package_feature        String
  count_vehicle          Int?
  count_order            Int?
  duration               Int
  merchants              Merchant[]
  MerchantPendingPayment MerchantPendingPayment[]
}

model Vehicle {
  vehicles_id   String         @id @default(uuid())
  merchant_id   String
  name          String
  model         String
  year          Int
  no_plat       String         @unique
  capacity      Int
  Merchant      Merchant       @relation(fields: [merchant_id], references: [merchant_id])
  Schedules     Schedule[]
  VehicleImages VehicleImage[]
}

model VehicleImage {
  vehicles_image_id String  @id @default(uuid())
  vehicles_id       String
  imageUrl          String  @db.LongText
  Vehicle           Vehicle @relation(fields: [vehicles_id], references: [vehicles_id])
}

model Schedule {
  schedules_id String   @id @default(uuid())
  merchant_id  String
  vehicles_id  String
  start_date   DateTime
  end_date     DateTime
  price        Int
  Merchant     Merchant @relation(fields: [merchant_id], references: [merchant_id])
  Vehicle      Vehicle  @relation(fields: [vehicles_id], references: [vehicles_id])
  orders       Order[]
}

model Payment {
  payment_id     String    @id @default(uuid())
  order_id       String
  merchant_id    String
  external_id    String    @unique
  amount         Int
  payment_method String
  status         String    @default("Pending")
  payment_date   DateTime?

  Order    Order    @relation(fields: [order_id], references: [order_id])
  Merchant Merchant @relation(fields: [merchant_id], references: [merchant_id])
  Booking  Booking?
}

model Order {
  order_id       String   @id @default(uuid())
  schedules_id   String
  merchant_id    String
  external_id    String   @unique
  start_date     DateTime
  end_date       DateTime
  customer_name  String
  customer_phone String   @default("")
  total_amount   Int
  status         String   @default("Pending")
  created_at     DateTime @default(now())

  Merchant Merchant  @relation(fields: [merchant_id], references: [merchant_id])
  Schedule Schedule  @relation(fields: [schedules_id], references: [schedules_id])
  payments Payment[]
  booking  Booking?
}

model Booking {
  booking_id  String   @id @default(uuid())
  order_id    String   @unique
  payment_id  String   @unique
  merchant_id String
  created_at  DateTime @default(now())
  imageUrl    String?  @db.LongText

  Order    Order    @relation(fields: [order_id], references: [order_id])
  Payment  Payment  @relation(fields: [payment_id], references: [payment_id])
  Merchant Merchant @relation(fields: [merchant_id], references: [merchant_id])
}
